---
description: 
globs: 
alwaysApply: false
---
# 自动化交易系统规则文档

## 项目概述
这是一个基于Python的自动化交易系统，主要用于控制夜神模拟器（Nox）执行申购流程。系统通过uiautomator2与Android模拟器交互，实现对同花顺APP的自动化操作，完成股票申购过程。

## 主要组件

### 核心模块
- `main.py`: 主程序入口，负责创建和管理GUI界面，处理用户交互
- `emulator_improved.py`: 核心模拟器控制模块，处理模拟器的启动、连接和操作
- `simulator.py`: 模拟器控制器，封装了对`emulator_improved.py`的调用
- `automation.py`: 自动化交易逻辑实现，处理具体业务流程
- `config.py`: 系统配置管理，处理配置文件读写和参数管理
- `run.py`: 程序启动器，检查环境依赖并启动主程序

### 数据层
- `mydatabase.db`: SQLite数据库文件，存储用户账号等信息
- `entity/`: 数据模型和实体类目录
  - `base_model.py`: 基础模型类，定义共享数据库连接
  - `user.py`: 用户模型，存储账号、密码等信息
  - `user_subscription_record.py`: 用户申购记录模型

### 用户界面
- `ui/`: UI相关组件目录
  - `account_dialog.py`: 账号管理对话框
  - `settings_dialog.py`: 系统设置对话框
- 使用PyQt6框架构建界面

### 工作进程
- `workers/`: 后台工作进程目录
  - `adb_worker.py`: ADB操作的异步处理线程

## 技术选型
- **UI框架**: PyQt6，用于构建桌面应用界面
- **自动化控制**: uiautomator2 2.11.0，用于Android设备控制
- **日志管理**: loguru，用于全面的日志记录
- **数据库ORM**: peewee，用于对象关系映射
- **系统交互**: pywin32，用于Windows系统API调用
- **打包工具**: pyinstaller，用于打包可执行文件

## 配置文件
- `app_config.json`: 应用配置，包含模拟器路径、包名和坐标信息
  ```json
  {
    "simulator_path": "路径到Nox模拟器的bin目录",
    "simulator_exe_path": "Nox.exe的完整路径",
    "broker_package": "com.hexin.plat.android",
    "coordinates": {
      "select_x": 201,
      "select_y": 785,
      "subscribe_x": 332,
      "subscribe_y": 783,
      "confirm_x": 197,
      "confirm_y": 916
    }
  }
  ```
- `simulator_config.txt`: 模拟器配置参数
- `requirements.txt`: Python依赖管理

## 目录结构
```
.
├── .cursor/          # Cursor IDE配置
├── .git/             # Git版本控制
├── entity/           # 数据模型目录
│   ├── base_model.py      # 基础模型类
│   ├── user.py            # 用户模型
│   └── user_subscription_record.py  # 申购记录模型
├── ui/               # 用户界面组件目录
│   ├── account_dialog.py   # 账号管理对话框
│   └── settings_dialog.py  # 设置对话框
├── workers/          # 工作进程目录
│   └── adb_worker.py       # ADB操作的异步处理线程
├── utils/            # 工具函数目录
├── app_config.json    # 应用配置文件
├── automation.py      # 自动化交易逻辑
├── config.py          # 配置管理
├── emulator_improved.py  # 核心模拟器控制模块
├── main.py            # 主程序入口
├── mydatabase.db      # SQLite数据库
├── README.md          # 项目文档
├── requirements.txt   # 项目依赖
├── run.py             # 程序启动器
├── simulator.py       # 模拟器控制器
└── simulator_config.txt  # 模拟器配置
```

## 开发指南

### 环境设置
1. 安装Python 3.x
2. 创建并激活虚拟环境
3. 安装依赖: `pip install -r requirements.txt`
4. 安装夜神模拟器(Nox)并确保正常运行
5. 配置`app_config.json`中的模拟器路径

### 代码规范
1. **编码规范**: 遵循PEP 8编码规范
2. **文档规范**: 为函数和类提供清晰的文档字符串
3. **错误处理**: 使用try-except捕获异常，避免程序崩溃
4. **日志记录**: 使用loguru进行日志记录，便于调试和问题追踪
5. **数据库操作**: 使用peewee ORM进行数据库操作
6. **线程安全**: 确保对共享资源的访问是线程安全的

### 功能模块开发
1. **UI修改**: 在`ui/`目录下创建新组件，或修改现有组件
2. **数据模型**: 在`entity/`目录下添加新的数据模型
3. **后台任务**: 在`workers/`目录下创建新的工作线程
4. **工具函数**: 在`utils/`目录下添加通用工具函数
5. **自动化逻辑**: 在`automation.py`中增强自动化流程

### 测试与调试
1. 使用夜神模拟器配合uiautomator2进行界面测试
2. 关注日志输出，排查异常情况
3. 针对常见错误场景添加异常处理
4. 使用ADB调试模拟器连接和交互问题

## 故障排除

### 模拟器连接问题
- 确保夜神模拟器已正确安装并运行
- 验证`app_config.json`中的模拟器路径是否正确
- 检查ADB是否能正常连接到模拟器(通常是127.0.0.1:62001)

### 申购操作失败
- 检查坐标配置是否与当前模拟器分辨率匹配
- 验证账号密码是否正确
- 确认同花顺APP是否已正确安装并更新到最新版本
- 检查网络连接是否稳定

### 程序崩溃
- 检查Python环境和依赖包是否完整安装
- 查看日志输出，定位错误源
- 确保数据库文件未被锁定或损坏



